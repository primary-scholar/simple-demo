<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- lifecycle bean dependency init-->
    <!--<bean id="domainA" class="com.mimu.simple.spring.file.lifecycle.d.DomainA">
        <constructor-arg ref="domainB"/>
    </bean>
    <bean id="domainB" class="com.mimu.simple.spring.file.lifecycle.d.DomainB">
        <constructor-arg ref="domainA"/>
    </bean>-->

    <bean id="domainC" class="com.mimu.simple.spring.file.lifecycle.d.DomainC">
        <property name="domainD" ref="domainD"/>
    </bean>
    <bean id="domainD" class="com.mimu.simple.spring.file.lifecycle.d.DomainD">
        <property name="domainC" ref="domainC"/>
    </bean>
    <!-- 对于 singleton 的实例解析，spring 可以解决 get set 方法的循环依赖，不能解决 构造函数的循环依赖 -->
    <!-- 对于 非 singleton 的实例解析，spring 无法解决循环依赖 -->
    <!--<bean id="domainC" class="com.mimu.simple.spring.file.lifecycle.d.DomainC" scope="prototype">
        <property name="domainD" ref="domainD"/>
    </bean>
    <bean id="domainD" class="com.mimu.simple.spring.file.lifecycle.d.DomainD" scope="prototype">
        <property name="domainC" ref="domainC"/>
    </bean>-->
    <!-- lifecycle bean dependency init-->

    <!-- lifecycle package init-->
    <bean id="person" class="com.mimu.simple.spring.file.lifecycle.l.Person" init-method="customInit"
          destroy-method="customDestory"
          p:name="zhangsan" p:phone="456"/>
    <bean id="customInstantiationAwareBeanPostProcessor"
          class="com.mimu.simple.spring.file.lifecycle.l.CustomInstantiationAwareBeanPostProcessor"/>
    <bean id="customBeanFactoryPostProcessor"
          class="com.mimu.simple.spring.file.lifecycle.l.CustomBeanFactoryPostProcessor"/>
    <!-- lifecycle package init-->
</beans>